name: Frontend CI/CD

on:
  push:
    branches: ["develop", "feature/**" ]
  pull_request:
    branches: [ "main","develop" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

        #Cache for node_modules
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

        #Check quality code
      - name: Lint code
        run: npm run lint
        continue-on-error: true

        #Check if a project uses TypeScript
      - name: Type check (TypeScript)
        run: npm run type-check
        continue-on-error: true

        #Security check of dependencies, alert if high-level vulnerabilities are detected
      - name: Security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Build
        run: npm run build --if-present

      - name: Run unit tests
        run: npm test || true

        #Create report test coverage
      - name: Generate code coverage
        run: npm run test:coverage || true
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ matrix.node-version }}
          path: .next/
          retention-days: 5
          include-hidden-files: true
          if-no-files-found: error

  code-quality:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  #Automation tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for E2E tests
        run: npm run build --if-present
        # Ensuring we have a build for E2E tests

      - name: Run E2E Tests
        run: npm run test:e2e || true
        continue-on-error: true

  deploy-staging:
    needs: [build-and-test, code-quality]
    if: github.ref == 'refs/heads/develop' && success()
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-20.x
          path: .next

      - name: Deploy to staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-token: ${{ secrets.GH_TOKEN }}

  deploy-production:
    needs: [deploy-staging, e2e-tests]
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://your-production-url.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files-20.x
          path: .next

      - name: Deploy to production
        # Replace this with the appropriate deployment action for your platform
        # Example for AWS S3:
        # uses: jakejarvis/s3-sync-action@master
        # with:
        #   args: --acl public-read --follow-symlinks --delete
        # env:
        #   AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: echo "Deploying to production environment"
        # Replace with actual deployment command

